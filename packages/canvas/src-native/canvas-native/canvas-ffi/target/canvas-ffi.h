#ifndef CBINDGEN_BINDINGS_H
#define CBINDGEN_BINDINGS_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum CompositeOperationType {
  SourceOver = 0,
  SourceIn = 1,
  SourceOut = 2,
  SourceAtop = 3,
  DestinationOver = 4,
  DestinationIn = 5,
  DestinationOut = 6,
  DestinationAtop = 7,
  Lighter = 8,
  Copy = 9,
  Xor = 10,
  Multiply = 11,
  Screen = 12,
  Overlay = 13,
  Darken = 14,
  Lighten = 15,
  ColorDodge = 16,
  ColorBurn = 17,
  HardLight = 18,
  SoftLight = 19,
  Difference = 20,
  Exclusion = 21,
  Hue = 22,
  Saturation = 23,
  Color = 24,
  Luminosity = 25,
} CompositeOperationType;

typedef enum FillRule {
  NonZero = 0,
  EvenOdd = 1,
} FillRule;

typedef enum ImageSmoothingQuality {
  Low = 0,
  Medium = 1,
  High = 2,
} ImageSmoothingQuality;

typedef enum LineCap {
  CapButt = 0,
  CapRound = 1,
  CapSquare = 2,
} LineCap;

typedef enum LineJoin {
  JoinRound = 0,
  JoinBevel = 1,
  JoinMiter = 2,
} LineJoin;

typedef enum PaintStyleValueType {
  PaintStyleValueTypeColor = 0,
  PaintStyleValueTypeGradient = 1,
  PaintStyleValueTypePattern = 2,
} PaintStyleValueType;

typedef enum Repetition {
  Repeat = 0,
  RepeatX = 1,
  RepeatY = 2,
  NoRepeat = 3,
} Repetition;

typedef enum TextAlign {
  START = 0,
  LEFT = 1,
  CENTER = 2,
  RIGHT = 3,
  END = 4,
} TextAlign;

typedef enum TextBaseLine {
  TOP = 0,
  HANGING = 1,
  MIDDLE = 2,
  ALPHABETIC = 3,
  IDEOGRAPHIC = 4,
  BOTTOM = 5,
} TextBaseLine;

typedef enum TextDirection {
  LTR = 0,
  RTL = 1,
} TextDirection;

typedef struct ContextWrapper ContextWrapper;

typedef struct ImageAsset ImageAsset;

typedef struct ImageData ImageData;

typedef struct Matrix Matrix;

typedef struct PaintStyle PaintStyle;

typedef struct Path Path;

typedef struct TextDecoder TextDecoder;

typedef struct TextEncoder TextEncoder;

typedef struct TextMetrics {
  float width;
  float actual_bounding_box_left;
  float actual_bounding_box_right;
  float font_bounding_box_ascent;
  float font_bounding_box_descent;
  float actual_bounding_box_ascent;
  float actual_bounding_box_descent;
  float em_height_ascent;
  float em_height_descent;
  float hanging_baseline;
  float alphabetic_baseline;
  float ideographic_baseline;
} TextMetrics;

typedef struct I8Array {
  int8_t *data;
  uintptr_t data_len;
} I8Array;

typedef struct I16Array {
  int16_t *data;
  uintptr_t data_len;
} I16Array;

typedef struct I32Array {
  int32_t *data;
  uintptr_t data_len;
} I32Array;

typedef struct U8Array {
  uint8_t *data;
  uintptr_t data_len;
} U8Array;

typedef struct U16Array {
  uint16_t *data;
  uintptr_t data_len;
} U16Array;

typedef struct U32Array {
  uint32_t *data;
  uintptr_t data_len;
} U32Array;

typedef struct F32Array {
  float *data;
  uintptr_t data_len;
} F32Array;

typedef struct F64Array {
  double *data;
  uintptr_t data_len;
} F64Array;

typedef struct PaintStyleValue {
  long long value;
  enum PaintStyleValueType value_type;
} PaintStyleValue;

void canvas_native_destroy_string(const char *string);

void canvas_native_destroy_context(struct ContextWrapper *context);

void canvas_native_destroy_paint_style(struct PaintStyle *style);

void canvas_native_destroy_text_metrics(struct TextMetrics *metrics);

int8_t *canvas_native_get_i8_array_data(struct I8Array *array);

uintptr_t canvas_native_get_i8_array_data_len(struct I8Array *array);

void canvas_native_destroy_i8_array(struct I8Array *array);

int16_t *canvas_native_get_i16_array_data(struct I16Array *array);

uintptr_t canvas_native_get_i16_array_data_len(struct I16Array *array);

void canvas_native_destroy_i16_array(struct I16Array *array);

int *canvas_native_get_I32_array_data(struct I32Array *array);

uintptr_t canvas_native_get_I32_array_data_len(struct I32Array *array);

void canvas_native_destroy_i32_array(struct I32Array *array);

uint8_t *canvas_native_get_u8_array_data(struct U8Array *array);

uintptr_t canvas_native_get_u8_array_data_len(struct U8Array *array);

void canvas_native_destroy_u8_array(struct U8Array *array);

uint16_t *canvas_native_get_u16_array_data(struct U16Array *array);

uintptr_t canvas_native_get_u16_array_data_len(struct U16Array *array);

void canvas_native_destroy_u16_array(struct U16Array *array);

uint32_t *canvas_native_get_u32_array_data(struct U32Array *array);

uintptr_t canvas_native_get_u32_array_data_len(struct U32Array *array);

void canvas_native_destroy_u32_array(struct U32Array *array);

float *canvas_native_get_f32_array_data(struct F32Array *array);

uintptr_t canvas_native_get_f32_array_data_len(struct F32Array *array);

void canvas_native_destroy_f32_array(struct F32Array *array);

double *canvas_native_get_f64_array_data(struct F64Array *array);

uintptr_t canvas_native_get_f64_array_data_len(struct F64Array *array);

void canvas_native_destroy_f64_array(struct F64Array *array);

struct ContextWrapper *canvas_native_context_init(float width,
                                                  float height,
                                                  float density,
                                                  bool alpha,
                                                  int font_color,
                                                  float ppi,
                                                  enum TextDirection direction);

void canvas_native_context_resize(struct ContextWrapper *context,
                                  float width,
                                  float height,
                                  float density,
                                  bool alpha,
                                  float ppi);

const char *canvas_native_context_data_url(struct ContextWrapper *context,
                                           const char *format,
                                           float quality);

struct U8Array *canvas_native_context_snapshot_canvas(struct ContextWrapper *context);

void canvas_native_context_flush(struct ContextWrapper *context);

void canvas_native_context_custom_with_buffer_flush(struct ContextWrapper *context,
                                                    uint8_t *buf,
                                                    uintptr_t buf_size,
                                                    float width,
                                                    float height);

void canvas_native_context_set_direction(struct ContextWrapper *context,
                                         enum TextDirection direction);

enum TextDirection canvas_native_context_get_direction(const struct ContextWrapper *context);

void canvas_native_context_set_fill_style(struct ContextWrapper *context, struct PaintStyle *style);

struct PaintStyleValue *canvas_native_context_get_fill_style(struct ContextWrapper *context);

long long canvas_native_context_get_style_value(struct PaintStyleValue *style);

enum PaintStyleValueType canvas_native_context_get_style_type(struct PaintStyleValue *style);

void canvas_native_context_set_filter(struct ContextWrapper *context, const char *filter);

const char *canvas_native_context_get_filter(struct ContextWrapper *context);

void canvas_native_context_set_font(struct ContextWrapper *context, const char *filter);

const char *canvas_native_context_get_font(struct ContextWrapper *context);

void canvas_native_context_set_global_alpha(struct ContextWrapper *context, float alpha);

float canvas_native_context_get_global_alpha(struct ContextWrapper *context);

void canvas_native_context_set_global_composite_operation(struct ContextWrapper *context,
                                                          enum CompositeOperationType operation);

enum CompositeOperationType canvas_native_context_get_global_composite_operation(struct ContextWrapper *context);

void canvas_native_context_set_image_smoothing_enabled(struct ContextWrapper *context,
                                                       bool enabled);

bool canvas_native_context_get_image_smoothing_enabled(struct ContextWrapper *context);

void canvas_native_context_set_image_smoothing_quality(struct ContextWrapper *context,
                                                       enum ImageSmoothingQuality quality);

enum ImageSmoothingQuality canvas_native_context_get_image_smoothing_quality(struct ContextWrapper *context);

void canvas_native_context_set_line_cap(struct ContextWrapper *context, enum LineCap cap);

enum LineCap canvas_native_context_get_line_cap(struct ContextWrapper *context);

void canvas_native_context_set_line_dash_offset(struct ContextWrapper *context, float offset);

float canvas_native_context_get_line_dash_offset(struct ContextWrapper *context);

void canvas_native_context_set_line_join(struct ContextWrapper *context, enum LineJoin join);

enum LineJoin canvas_native_context_get_line_join(struct ContextWrapper *context);

void canvas_native_context_set_line_width(struct ContextWrapper *context, float width);

float canvas_native_context_get_line_width(struct ContextWrapper *context);

void canvas_native_context_set_miter_limit(struct ContextWrapper *context, float limit);

float canvas_native_context_get_miter_limit(struct ContextWrapper *context);

void canvas_native_context_set_shadow_blur(struct ContextWrapper *context, float blur);

float canvas_native_context_get_shadow_blur(struct ContextWrapper *context);

void canvas_native_context_set_shadow_color(struct ContextWrapper *context,
                                            uint8_t r,
                                            uint8_t g,
                                            uint8_t b,
                                            uint8_t a);

void canvas_native_context_set_shadow_color_string(struct ContextWrapper *context,
                                                   const char *color);

const char *canvas_native_context_get_shadow_color(struct ContextWrapper *context);

void canvas_native_context_set_shadow_offset_x(struct ContextWrapper *context, float x);

float canvas_native_context_get_shadow_offset_x(struct ContextWrapper *context);

void canvas_native_context_set_shadow_offset_y(struct ContextWrapper *context, float y);

float canvas_native_context_get_shadow_offset_y(struct ContextWrapper *context);

void canvas_native_context_set_stroke_style(struct ContextWrapper *context,
                                            struct PaintStyle *style);

struct PaintStyleValue *canvas_native_context_get_stroke_style(struct ContextWrapper *context);

void canvas_native_context_set_text_align(struct ContextWrapper *context, enum TextAlign align);

enum TextAlign canvas_native_context_get_text_align(struct ContextWrapper *context);

void canvas_native_context_set_text_baseline(struct ContextWrapper *context,
                                             enum TextBaseLine baseline);

enum TextBaseLine canvas_native_context_get_text_baseline(struct ContextWrapper *context);

void canvas_native_context_arc(struct ContextWrapper *context,
                               float x,
                               float y,
                               float radius,
                               float start_angle,
                               float end_angle,
                               bool anti_clockwise);

void canvas_native_context_arc_to(struct ContextWrapper *context,
                                  float x1,
                                  float y1,
                                  float x2,
                                  float y2,
                                  float radius);

void canvas_native_context_begin_path(struct ContextWrapper *context);

void canvas_native_context_bezier_curve_to(struct ContextWrapper *context,
                                           float cp1x,
                                           float cp1y,
                                           float cp2x,
                                           float cp2y,
                                           float x,
                                           float y);

void canvas_native_context_clear_rect(struct ContextWrapper *context,
                                      float x,
                                      float y,
                                      float width,
                                      float height);

void canvas_native_context_clip(struct ContextWrapper *context,
                                struct Path *path,
                                enum FillRule rule);

void canvas_native_context_clip_rule(struct ContextWrapper *context, enum FillRule rule);

void canvas_native_context_close_path(struct ContextWrapper *context);

struct ImageData *canvas_native_context_create_image_data(int width, int height);

struct PaintStyle *canvas_native_context_create_linear_gradient(struct ContextWrapper *context,
                                                                float x0,
                                                                float y0,
                                                                float x1,
                                                                float y1);

struct PaintStyle *canvas_native_context_create_pattern(struct ContextWrapper *context,
                                                        const uint8_t *image_data,
                                                        uintptr_t image_len,
                                                        int width,
                                                        int height,
                                                        enum Repetition repetition);

struct PaintStyle *canvas_native_context_create_pattern_asset(struct ContextWrapper *context,
                                                              struct ImageAsset *asset,
                                                              enum Repetition repetition);

struct PaintStyle *canvas_native_context_create_pattern_encoded(struct ContextWrapper *context,
                                                                const uint8_t *image_data,
                                                                uintptr_t image_len,
                                                                enum Repetition repetition);

struct PaintStyle *canvas_native_context_create_radial_gradient(struct ContextWrapper *context,
                                                                float x0,
                                                                float y0,
                                                                float r0,
                                                                float x1,
                                                                float y1,
                                                                float r1);

void canvas_native_context_draw_image_dx_dy(struct ContextWrapper *context,
                                            const uint8_t *image_data,
                                            uintptr_t image_len,
                                            float width,
                                            float height,
                                            float dx,
                                            float dy);

void canvas_native_context_draw_image_dx_dy_dw_dh(struct ContextWrapper *context,
                                                  const uint8_t *image_data,
                                                  uintptr_t image_len,
                                                  float width,
                                                  float height,
                                                  float dx,
                                                  float dy,
                                                  float d_width,
                                                  float d_height);

void canvas_native_context_draw_image(struct ContextWrapper *context,
                                      const uint8_t *image_data,
                                      uintptr_t image_len,
                                      float width,
                                      float height,
                                      float sx,
                                      float sy,
                                      float s_width,
                                      float s_height,
                                      float dx,
                                      float dy,
                                      float d_width,
                                      float d_height);

void canvas_native_context_draw_image_encoded_dx_dy(struct ContextWrapper *context,
                                                    const uint8_t *image_data,
                                                    uintptr_t image_len,
                                                    float dx,
                                                    float dy);

void canvas_native_context_draw_image_encoded_dx_dy_dw_dh(struct ContextWrapper *context,
                                                          const uint8_t *image_data,
                                                          uintptr_t image_len,
                                                          float dx,
                                                          float dy,
                                                          float d_width,
                                                          float d_height);

void canvas_native_context_draw_image_encoded(struct ContextWrapper *context,
                                              const uint8_t *image_data,
                                              uintptr_t image_len,
                                              float sx,
                                              float sy,
                                              float s_width,
                                              float s_height,
                                              float dx,
                                              float dy,
                                              float d_width,
                                              float d_height);

void canvas_native_context_draw_image_dx_dy_asset(struct ContextWrapper *context,
                                                  struct ImageAsset *asset,
                                                  float dx,
                                                  float dy);

void canvas_native_context_draw_image_dx_dy_dw_dh_asset(struct ContextWrapper *context,
                                                        struct ImageAsset *asset,
                                                        float dx,
                                                        float dy,
                                                        float d_width,
                                                        float d_height);

void canvas_native_context_draw_image_asset(struct ContextWrapper *context,
                                            struct ImageAsset *asset,
                                            float sx,
                                            float sy,
                                            float s_width,
                                            float s_height,
                                            float dx,
                                            float dy,
                                            float d_width,
                                            float d_height);

void canvas_native_context_ellipse(struct ContextWrapper *context,
                                   float x,
                                   float y,
                                   float radius_x,
                                   float radius_y,
                                   float rotation,
                                   float start_angle,
                                   float end_angle,
                                   bool anticlockwise);

void canvas_native_context_fill(struct ContextWrapper *context,
                                struct Path *path,
                                enum FillRule rule);

void canvas_native_context_fill_rect(struct ContextWrapper *context,
                                     float x,
                                     float y,
                                     float width,
                                     float height);

void canvas_native_context_fill_text(struct ContextWrapper *context,
                                     const char *text,
                                     float x,
                                     float y,
                                     float width);

struct ImageData *canvas_native_context_get_image_data(struct ContextWrapper *context,
                                                       float sx,
                                                       float sy,
                                                       float sw,
                                                       float sh);

struct F32Array *canvas_native_context_get_line_dash(struct ContextWrapper *context);

struct Matrix *canvas_native_context_get_transform(struct ContextWrapper *context);

bool canvas_native_context_is_point_in_path(struct ContextWrapper *context,
                                            struct Path *path,
                                            float x,
                                            float y,
                                            enum FillRule rule);

bool canvas_native_context_is_point_in_stroke(struct ContextWrapper *context,
                                              struct Path *path,
                                              float x,
                                              float y);

void canvas_native_context_line_to(struct ContextWrapper *context, float x, float y);

long long canvas_native_context_measure_text(struct ContextWrapper *context, const char *text);

void canvas_native_context_move_to(struct ContextWrapper *context, float x, float y);

void canvas_native_context_put_image_data(struct ContextWrapper *context,
                                          struct ImageData *image_data,
                                          float dx,
                                          float dy,
                                          float dirty_x,
                                          float dirty_y,
                                          float dirty_width,
                                          float dirty_height);

void canvas_native_context_quadratic_curve_to(struct ContextWrapper *context,
                                              float cpx,
                                              float cpy,
                                              float x,
                                              float y);

void canvas_native_context_rect(struct ContextWrapper *context,
                                float x,
                                float y,
                                float width,
                                float height);

void canvas_native_context_reset_transform(struct ContextWrapper *context);

void canvas_native_context_restore(struct ContextWrapper *context);

void canvas_native_context_rotate(struct ContextWrapper *context, float angle);

void canvas_native_context_save(struct ContextWrapper *context);

void canvas_native_context_scale(struct ContextWrapper *context, float x, float y);

void canvas_native_context_set_line_dash(struct ContextWrapper *context,
                                         const float *data,
                                         uintptr_t data_length);

void canvas_native_context_set_transform(struct ContextWrapper *context,
                                         float a,
                                         float b,
                                         float c,
                                         float d,
                                         float e,
                                         float f);

void canvas_native_context_set_transform_matrix(struct ContextWrapper *context,
                                                struct Matrix *matrix);

void canvas_native_context_stroke(struct ContextWrapper *context, struct Path *path);

void canvas_native_context_stroke_rect(struct ContextWrapper *context,
                                       float x,
                                       float y,
                                       float width,
                                       float height);

void canvas_native_context_stroke_text(struct ContextWrapper *context,
                                       const char *text,
                                       float x,
                                       float y,
                                       float width);

void canvas_native_context_transform(struct ContextWrapper *context,
                                     float a,
                                     float b,
                                     float c,
                                     float d,
                                     float e,
                                     float f);

void canvas_native_context_translate(struct ContextWrapper *context, float x, float y);

void canvas_native_gl_tex_image_2D_asset(unsigned int target,
                                         int level,
                                         int internalformat,
                                         int border,
                                         unsigned int format,
                                         unsigned int image_type,
                                         struct ImageAsset *asset,
                                         bool flip_y);

void canvas_native_gl_tex_sub_image_2D_asset(unsigned int target,
                                             int level,
                                             int xoffset,
                                             int yoffset,
                                             unsigned int format,
                                             unsigned int image_type,
                                             struct ImageAsset *asset,
                                             bool flip_y);

void canvas_native_gl_tex_image_3D_asset(unsigned int target,
                                         int level,
                                         int internalformat,
                                         int width,
                                         int height,
                                         int depth,
                                         int border,
                                         unsigned int format,
                                         unsigned int image_type,
                                         struct ImageAsset *asset,
                                         bool flip_y);

void canvas_native_gl_tex_sub_image_3D_asset(unsigned int target,
                                             int level,
                                             int xoffset,
                                             int yoffset,
                                             int zoffset,
                                             int width,
                                             int height,
                                             int depth,
                                             unsigned int format,
                                             unsigned int image_type,
                                             struct ImageAsset *asset,
                                             bool flip_y);

void canvas_native_gl_vertex_attrib_pointer(unsigned int index,
                                            int size,
                                            unsigned int pointer_type,
                                            bool normalized,
                                            int stride,
                                            long long offset);

long long canvas_native_gl_get_vertex_attrib_offset(unsigned int index, unsigned int pname);

void canvas_native_gradient_add_color_stop(struct PaintStyle *style, float stop, const char *color);

struct ImageAsset *canvas_native_image_asset_create(void);

bool canvas_native_image_asset_load_from_path(struct ImageAsset *asset, const char *path);

bool canvas_native_image_asset_load_from_raw(struct ImageAsset *asset,
                                             const uint8_t *array,
                                             uintptr_t size);

struct U8Array *canvas_native_image_asset_get_bytes(struct ImageAsset *asset);

struct U8Array *canvas_native_image_asset_get_rgba_bytes(struct ImageAsset *asset);

struct U8Array *canvas_native_image_asset_get_rgb_bytes(struct ImageAsset *asset);

unsigned int canvas_native_image_asset_width(struct ImageAsset *asset);

unsigned int canvas_native_image_asset_height(struct ImageAsset *asset);

const char *canvas_native_image_asset_get_error(struct ImageAsset *asset);

bool canvas_native_image_asset_has_error(struct ImageAsset *asset);

bool canvas_native_image_asset_scale(struct ImageAsset *asset, unsigned int x, unsigned int y);

bool canvas_native_image_asset_flip_x(struct ImageAsset *asset);

bool canvas_native_image_asset_flip_x_in_place(struct ImageAsset *asset);

bool canvas_native_image_asset_flip_y(struct ImageAsset *asset);

void canvas_native_image_asset_flip_y_in_place_owned(uint8_t *buf, uintptr_t length);

void canvas_native_image_asset_flip_x_in_place_owned(uint8_t *buf, uintptr_t length);

bool canvas_native_image_asset_flip_y_in_place(struct ImageAsset *asset);

bool canvas_native_image_asset_save_path(struct ImageAsset *asset,
                                         const char *path,
                                         unsigned int format);

void canvas_native_destroy_image_asset(struct ImageAsset *asset);

long long canvas_native_image_bitmap_create_from_bytes(const uint8_t *image_bytes,
                                                       uintptr_t image_size,
                                                       float image_width,
                                                       float image_height,
                                                       bool flip_y,
                                                       int32_t premultiply_alpha,
                                                       int32_t color_space_conversion,
                                                       int32_t resize_quality,
                                                       float resize_width,
                                                       float resize_height);

long long canvas_native_image_bitmap_create_from_bytes_src_rect(const uint8_t *image_bytes,
                                                                uintptr_t image_size,
                                                                float image_width,
                                                                float image_height,
                                                                float sx,
                                                                float sy,
                                                                float s_width,
                                                                float s_height,
                                                                bool flip_y,
                                                                int32_t premultiply_alpha,
                                                                int32_t color_space_conversion,
                                                                int32_t resize_quality,
                                                                float resize_width,
                                                                float resize_height);

long long canvas_native_image_bitmap_create_from_image_asset(long long asset,
                                                             bool flip_y,
                                                             int premultiply_alpha,
                                                             int color_space_conversion,
                                                             int resize_quality,
                                                             float resize_width,
                                                             float resize_height);

long long canvas_native_image_bitmap_create_from_image_asset_src_rect(long long asset,
                                                                      float sx,
                                                                      float sy,
                                                                      float s_width,
                                                                      float s_height,
                                                                      bool flip_y,
                                                                      int premultiply_alpha,
                                                                      int color_space_conversion,
                                                                      int resize_quality,
                                                                      float resize_width,
                                                                      float resize_height);

long long canvas_native_image_bitmap_create_from_bytes_encoded(const uint8_t *image_bytes,
                                                               uintptr_t image_size,
                                                               bool flip_y,
                                                               int32_t premultiply_alpha,
                                                               int32_t color_space_conversion,
                                                               int32_t resize_quality,
                                                               float resize_width,
                                                               float resize_height);

long long canvas_native_image_bitmap_create_from_bytes_encoded_src_rect(const uint8_t *image_bytes,
                                                                        uintptr_t image_size,
                                                                        float sx,
                                                                        float sy,
                                                                        float s_width,
                                                                        float s_height,
                                                                        bool flip_y,
                                                                        int32_t premultiply_alpha,
                                                                        int32_t color_space_conversion,
                                                                        int32_t resize_quality,
                                                                        float resize_width,
                                                                        float resize_height);

long long canvas_native_image_bitmap_create_from_image_data(long long image_data,
                                                            bool flip_y,
                                                            int premultiply_alpha,
                                                            int color_space_conversion,
                                                            int resize_quality,
                                                            float resize_width,
                                                            float resize_height);

long long canvas_native_image_bitmap_create_from_image_data_src_rect(long long image_data,
                                                                     float sx,
                                                                     float sy,
                                                                     float s_width,
                                                                     float s_height,
                                                                     bool flip_y,
                                                                     int premultiply_alpha,
                                                                     int color_space_conversion,
                                                                     int resize_quality,
                                                                     float resize_width,
                                                                     float resize_height);

struct ImageData *canvas_native_image_data_create(int width, int height);

int canvas_native_image_data_width(struct ImageData *image_data);

int canvas_native_image_data_height(struct ImageData *image_data);

uint8_t *canvas_native_image_data_data(struct ImageData *image_data);

uintptr_t canvas_native_image_data_data_length(struct ImageData *image_data);

struct ImageData *canvas_native_image_data_get_shared_instance(struct ImageData *image_data);

void canvas_native_destroy_image_data(struct ImageData *image_data);

struct Matrix *canvas_native_matrix_create(void);

void canvas_native_matrix_update(struct Matrix *matrix, const float *data, uintptr_t data_len);

float canvas_native_matrix_a(struct Matrix *matrix);

void canvas_native_matrix_set_a(struct Matrix *matrix, float a);

float canvas_native_matrix_b(struct Matrix *matrix);

void canvas_native_matrix_set_b(struct Matrix *matrix, float b);

float canvas_native_matrix_c(struct Matrix *matrix);

void canvas_native_matrix_set_c(struct Matrix *matrix, float c);

float canvas_native_matrix_d(struct Matrix *matrix);

void canvas_native_matrix_set_d(struct Matrix *matrix, float d);

float canvas_native_matrix_e(struct Matrix *matrix);

void canvas_native_matrix_set_e(struct Matrix *matrix, float e);

float canvas_native_matrix_f(struct Matrix *matrix);

void canvas_native_matrix_set_f(struct Matrix *matrix, float f);

float canvas_native_matrix_m11(struct Matrix *matrix);

void canvas_native_matrix_set_m11(struct Matrix *matrix, float m11);

float canvas_native_matrix_m12(struct Matrix *matrix);

void canvas_native_matrix_set_m12(struct Matrix *matrix, float m12);

float canvas_native_matrix_m13(struct Matrix *matrix);

void canvas_native_matrix_set_m13(struct Matrix *matrix, float m13);

float canvas_native_matrix_m14(struct Matrix *matrix);

void canvas_native_matrix_set_m14(struct Matrix *matrix, float m14);

float canvas_native_matrix_m21(struct Matrix *matrix);

void canvas_native_matrix_set_m21(struct Matrix *matrix, float m21);

float canvas_native_matrix_m22(struct Matrix *matrix);

void canvas_native_matrix_set_m22(struct Matrix *matrix, float m22);

float canvas_native_matrix_m23(struct Matrix *matrix);

void canvas_native_matrix_set_m23(struct Matrix *matrix, float m23);

float canvas_native_matrix_m24(struct Matrix *matrix);

void canvas_native_matrix_set_m24(struct Matrix *matrix, float m24);

float canvas_native_matrix_m31(struct Matrix *matrix);

void canvas_native_matrix_set_m31(struct Matrix *matrix, float m31);

float canvas_native_matrix_m32(struct Matrix *matrix);

void canvas_native_matrix_set_m32(struct Matrix *matrix, float m32);

float canvas_native_matrix_m33(struct Matrix *matrix);

void canvas_native_matrix_set_m33(struct Matrix *matrix, float m33);

float canvas_native_matrix_m34(struct Matrix *matrix);

void canvas_native_matrix_set_m34(struct Matrix *matrix, float m34);

float canvas_native_matrix_m41(struct Matrix *matrix);

void canvas_native_matrix_set_m41(struct Matrix *matrix, float m41);

float canvas_native_matrix_m42(struct Matrix *matrix);

void canvas_native_matrix_set_m42(struct Matrix *matrix, float m42);

float canvas_native_matrix_m43(struct Matrix *matrix);

void canvas_native_matrix_set_m43(struct Matrix *matrix, float m43);

float canvas_native_matrix_m44(struct Matrix *matrix);

void canvas_native_matrix_set_m44(struct Matrix *matrix, float m44);

void destroy_matrix(struct Matrix *matrix);

void canvas_native_paint_style_set_fill_color_with_string(struct ContextWrapper *context,
                                                          const char *color);

void canvas_native_paint_style_set_stroke_color_with_string(struct ContextWrapper *context,
                                                            const char *color);

const char *canvas_native_paint_style_get_color_string(struct PaintStyle *color);

void canvas_native_destroy_paint_style_value(struct PaintStyleValue *value);

struct Path *canvas_native_path_create(void);

struct Path *canvas_native_path_create_with_path(struct Path *path);

struct Path *canvas_native_path_create_with_string(const char *string);

void canvas_native_path_add_path(struct Path *path, struct Path *path_to_add);

void canvas_native_path_add_path_with_matrix(struct Path *path,
                                             struct Path *path_to_add,
                                             struct Matrix *matrix);

void canvas_native_path_close_path(struct Path *path);

void canvas_native_path_move_to(struct Path *path, float x, float y);

void canvas_native_path_line_to(struct Path *path, float x, float y);

void canvas_native_path_bezier_curve_to(struct Path *path,
                                        float cp1x,
                                        float cp1y,
                                        float cp2x,
                                        float cp2y,
                                        float x,
                                        float y);

void canvas_native_path_quadratic_curve_to(struct Path *path,
                                           float cpx,
                                           float cpy,
                                           float x,
                                           float y);

void canvas_native_path_arc(struct Path *path,
                            float x,
                            float y,
                            float radius,
                            float start_angle,
                            float end_angle,
                            bool anti_clockwise);

void canvas_native_path_arc_to(struct Path *path,
                               float x1,
                               float y1,
                               float x2,
                               float y2,
                               float radius);

void canvas_native_path_ellipse(struct Path *path,
                                float x,
                                float y,
                                float radius_x,
                                float radius_y,
                                float rotation,
                                float start_angle,
                                float end_angle,
                                bool anticlockwise);

void canvas_native_path_rect(struct Path *path, float x, float y, float width, float height);

void canvas_native_destroy_path(struct Path *path);

void canvas_native_pattern_set_transform(struct PaintStyle *pattern, struct Matrix *matrix);

void canvas_native_svg_draw_from_string(struct ContextWrapper *context, const char *svg);

void canvas_native_svg_draw_from_path(struct ContextWrapper *context, const char *path);

struct TextDecoder *canvas_native_text_decoder_create(const char *decoding);

const char *canvas_native_text_decoder_get_encoding(struct TextDecoder *decoder);

const char *canvas_native_text_decoder_decode(struct TextDecoder *decoder,
                                              const uint8_t *data,
                                              uintptr_t len);

const struct U8Array *canvas_native_text_decoder_decode_to_bytes(struct TextDecoder *decoder,
                                                                 const uint8_t *data,
                                                                 uintptr_t len);

const char *canvas_native_text_decoder_decode_u16(struct TextDecoder *decoder,
                                                  const uint16_t *data,
                                                  uintptr_t len);

const char *canvas_native_text_decoder_decode_i16(struct TextDecoder *decoder,
                                                  const int16_t *data,
                                                  uintptr_t len);

const char *canvas_native_text_decoder_decode_i32(struct TextDecoder *decoder,
                                                  const int32_t *data,
                                                  uintptr_t len);

void canvas_native_destroy_text_decoder(struct TextDecoder *decoder);

struct U8Array *canvas_native_text_decoder_decode_bytes(struct TextDecoder *decoder,
                                                        const uint8_t *data,
                                                        uintptr_t len);

struct U8Array *canvas_native_text_decoder_decode_u16_bytes(struct TextDecoder *decoder,
                                                            const uint16_t *data,
                                                            uintptr_t len);

struct U8Array *canvas_native_text_decoder_decode_i16_bytes(struct TextDecoder *decoder,
                                                            const int16_t *data,
                                                            uintptr_t len);

struct U8Array *canvas_native_text_decoder_decode_i32_bytes(struct TextDecoder *decoder,
                                                            const int32_t *data,
                                                            uintptr_t len);

struct U8Array *canvas_native_text_decoder_decode_u32_bytes(struct TextDecoder *decoder,
                                                            const uint32_t *data,
                                                            uintptr_t len);

struct TextEncoder *canvas_native_text_encoder_create(const char *encoding);

const char *canvas_native_text_encoder_get_encoding(struct TextEncoder *encoder);

struct U8Array *canvas_native_text_encoder_encode(struct TextEncoder *encoder, const char *text);

void canvas_native_destroy_text_encoder(struct TextEncoder *encoder);

float canvas_native_text_metrics_get_width(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_actual_bounding_box_left(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_actual_bounding_box_right(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_actual_bounding_box_ascent(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_actual_bounding_box_descent(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_font_bounding_box_ascent(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_font_bounding_box_descent(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_em_height_ascent(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_em_height_descent(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_hanging_baseline(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_alphabetic_baseline(struct TextMetrics *metrics);

float canvas_native_text_metrics_get_ideographic_baseline(struct TextMetrics *metrics);

void flip_y_in_place(uint8_t *data, uintptr_t length, uintptr_t bytes_per_row, uintptr_t height);

void flip_y_in_place_3d(uint8_t *data,
                        uintptr_t length,
                        uintptr_t bytes_per_row,
                        uintptr_t height,
                        uintptr_t depth);

void flip_y_in_place_3d_i8(int8_t *data,
                           uintptr_t length,
                           uintptr_t bytes_per_row,
                           uintptr_t height,
                           uintptr_t depth);

void flip_y_in_place_3d_u16(uint16_t *data,
                            uintptr_t length,
                            uintptr_t bytes_per_row,
                            uintptr_t height,
                            uintptr_t depth);

void flip_y_in_place_3d_i16(int16_t *data,
                            uintptr_t length,
                            uintptr_t bytes_per_row,
                            uintptr_t height,
                            uintptr_t depth);

void flip_y_in_place_3d_u32(uint32_t *data,
                            uintptr_t length,
                            uintptr_t bytes_per_row,
                            uintptr_t height,
                            uintptr_t depth);

void flip_y_in_place_3d_i32(int32_t *data,
                            uintptr_t length,
                            uintptr_t bytes_per_row,
                            uintptr_t height,
                            uintptr_t depth);

void flip_y_in_place_3d_f32(float *data,
                            uintptr_t length,
                            uintptr_t bytes_per_row,
                            uintptr_t height,
                            uintptr_t depth);

void flip_y_in_place_3d_f64(double *data,
                            uintptr_t length,
                            uintptr_t bytes_per_row,
                            uintptr_t height,
                            uintptr_t depth);

void flip_y_in_place_i8(int8_t *data, uintptr_t length, uintptr_t bytes_per_row, uintptr_t height);

void flip_y_in_place_u16(uint16_t *data,
                         uintptr_t length,
                         uintptr_t bytes_per_row,
                         uintptr_t height);

void flip_y_in_place_i16(int16_t *data,
                         uintptr_t length,
                         uintptr_t bytes_per_row,
                         uintptr_t height);

void flip_y_in_place_u32(uint32_t *data,
                         uintptr_t length,
                         uintptr_t bytes_per_row,
                         uintptr_t height);

void flip_y_in_place_i32(int32_t *data,
                         uintptr_t length,
                         uintptr_t bytes_per_row,
                         uintptr_t height);

void flip_y_in_place_f32(float *data, uintptr_t length, uintptr_t bytes_per_row, uintptr_t height);

void flip_y_in_place_f64(double *data, uintptr_t length, uintptr_t bytes_per_row, uintptr_t height);

#endif /* CBINDGEN_BINDINGS_H */
